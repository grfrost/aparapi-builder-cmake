diff --git a/src/cpp/CLException.h b/src/cpp/CLException.h
index 73b113d..b6fd82b 100644
--- a/src/cpp/CLException.h
+++ b/src/cpp/CLException.h
@@ -62,8 +62,12 @@ public:
       }
    }
 
+
+
    const char* what() {
-       return std::string("!!!!!!! " + _message + " failed " + CLHelper::errString(status()) + " \n").c_str();
+       static char msg[1024];
+       std::strcpy(msg, std::string("!!!!!!! " + _message + " failed " + CLHelper::errString(status()) + " \n").c_str());
+       return msg;
    }
 
    static void checkCLError(cl_int status, std::string error) {
diff --git a/src/cpp/JNIExceptions.cpp b/src/cpp/JNIExceptions.cpp
index 9df45bd..4bd9b51 100644
--- a/src/cpp/JNIExceptions.cpp
+++ b/src/cpp/JNIExceptions.cpp
@@ -3,7 +3,7 @@
 jint throwNoClassDefError( JNIEnv *env, char *message )
 {
     jclass exClass;
-    char *className = "java/lang/NoClassDefFoundError";
+    char *className = (char*)"java/lang/NoClassDefFoundError";
 
     exClass = env->FindClass( className);
     if (exClass == NULL) {
@@ -21,7 +21,7 @@ jint throwAparapiJNIRuntimeException( JNIEnv *env, std::string message ) {
 jint throwAparapiJNIRuntimeException( JNIEnv *env, const char *message )
 {
     jclass exClass;
-    char *className = "com/aparapi/exception/AparapiJNIException";
+    char *className = (char*)"com/aparapi/exception/AparapiJNIException";
 
     exClass = env->FindClass( className );
     if (exClass == NULL) {
diff --git a/src/cpp/JNIExceptions.h b/src/cpp/JNIExceptions.h
index bcb44a0..d76daae 100644
--- a/src/cpp/JNIExceptions.h
+++ b/src/cpp/JNIExceptions.h
@@ -51,12 +51,15 @@ public:
 
    void printError() {
       if(_message != "") {
-         fprintf(stderr, "!!!!!!! %s failed %s\n", message());
+         fprintf(stderr, "!!!!!!! failed %s\n", message());
       }
    }
 
    const char* what() {
-       return std::string("!!!!!!! " + _message + " failed\n").c_str();
+       static char msg[1024];
+       std::strcpy(msg,
+        std::string("!!!!!!! " + _message + " failed\n").c_str());
+       return msg;
    }
 };
 
diff --git a/src/cpp/classtools.cpp b/src/cpp/classtools.cpp
index 305b377..5431c42 100644
--- a/src/cpp/classtools.cpp
+++ b/src/cpp/classtools.cpp
@@ -71,7 +71,7 @@ ByteBuffer::ByteBuffer(byte_t *_bytes, size_t _len)
       memcpy((void*)bytes, (void*)_bytes, len);
    }
 ByteBuffer::~ByteBuffer(){
-   delete bytes;
+   delete []bytes;
 }
 byte_t *ByteBuffer::getBytes(){
    return(bytes);
@@ -367,7 +367,7 @@ AttributeInfo::AttributeInfo(ByteBuffer *_byteBuffer, ConstantPoolEntry **_const
       attribute_type  = LocalVariableTable;
    }
 #ifdef SHOW
-   fprintf(stdout, " }] ", attributeName->getUTF8Bytes());
+   fprintf(stdout, " }] %s ", attributeName->getUTF8Bytes());
 #endif
 }
 u2_t AttributeInfo::getAttributeNameIndex(){
diff --git a/src/cpp/invoke/OpenCLJNI.cpp b/src/cpp/invoke/OpenCLJNI.cpp
index bee85a6..b3acaa8 100644
--- a/src/cpp/invoke/OpenCLJNI.cpp
+++ b/src/cpp/invoke/OpenCLJNI.cpp
@@ -441,7 +441,7 @@ JNI_JAVA(void, OpenCLJNI, invoke)
         profileInfoArr[i] = new ProfileInfo();
         //fprintf(stdout, "allocated a new ProfileInfo for %d\n", i);
         int type = (i>(writes+1))?2:((i>writes)?1:0);
-        profile(profileInfoArr[i], &events[i], type, "unknown", 0L);
+        profile(profileInfoArr[i], &events[i], type, (char*)"unknown", 0L);
         //fprintf(stdout, "type = %d\n", type);
         clReleaseEvent(events[i]);
       }
diff --git a/src/cpp/runKernel/Aparapi.cpp b/src/cpp/runKernel/Aparapi.cpp
index 73d5bc1..92c918a 100644
--- a/src/cpp/runKernel/Aparapi.cpp
+++ b/src/cpp/runKernel/Aparapi.cpp
@@ -87,12 +87,13 @@ static const int CANCEL_STATUS_TRUE = 1;
  * the CL_VERSION_1_2 ifdef.
  */
 int enqueueMarker(cl_command_queue commandQueue, cl_event* firstEvent) {
-//#ifdef CL_VERSION_1_2
-//   return clEnqueueMarkerWithWaitList(commandQueue, 0, NULL, firstEvent);
-//#else
+#ifdef CL_VERSION_1_2
+   return clEnqueueMarkerWithWaitList(commandQueue, 0, NULL, firstEvent);
+#else
    // this was deprecated in 1.1 make sure we use -DCL_USE_DEPRECATED_OPENCL_1_1_APIS
    return clEnqueueMarker(commandQueue, firstEvent);
-//#endif
+
+#endif
 }
 
 /**
@@ -858,7 +859,7 @@ JNI_JAVA(jlong, KernelRunnerJNI, getKernelMinimumPrivateMemSizeInUsePerWorkItemJ
       int length = queryKernelWorkGroupInfo(jEnv, jniContext, CL_KERNEL_PRIVATE_MEM_SIZE, &maxPrivateMemSize);
       if (length != 1) {
          throwAparapiJNIRuntimeException(jEnv, "getKernelMinimumPrivateMemSizeInUsePerWorkItemJNI() invalid length" + std::to_string(length));
-         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + length);
+         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + std::to_string(length));
       }
 
       return (jlong)maxPrivateMemSize;	
@@ -886,7 +887,7 @@ JNI_JAVA(jlong, KernelRunnerJNI, getKernelLocalMemSizeInUseJNI)
       int length = queryKernelWorkGroupInfo(jEnv, jniContext, CL_KERNEL_LOCAL_MEM_SIZE, &maxLocalMemSize);
       if (length != 1) {
          throwAparapiJNIRuntimeException(jEnv, "getKernelLocalMemSizeInUseJNI() invalid length" + std::to_string(length));
-         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + length);
+         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + std::to_string(length));
       }
       
       return (jlong)maxLocalMemSize;
@@ -914,7 +915,7 @@ JNI_JAVA(jint, KernelRunnerJNI, getKernelPreferredWorkGroupSizeMultipleJNI)
       int length = queryKernelWorkGroupInfo(jEnv, jniContext, CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE, preferredWorkGroupSize);
       if (length != 1) {
          throwAparapiJNIRuntimeException(jEnv, "getKernelPreferredWorkGroupSizeMultipleJNI() invalid length" + std::to_string(length));
-         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + length);
+         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + std::to_string(length));
       }
    
       return (jint)preferredWorkGroupSize[0];
@@ -942,7 +943,7 @@ JNI_JAVA(jint, KernelRunnerJNI, getKernelMaxWorkGroupSizeJNI)
       int length = queryKernelWorkGroupInfo(jEnv, jniContext, CL_KERNEL_WORK_GROUP_SIZE, maxWorkGroupSize);
       if (length != 1) {
          throwAparapiJNIRuntimeException(jEnv, "getKernelMaxWorkGroupSizeJNI() invalid length" + std::to_string(length));
-         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + length);
+         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + std::to_string(length));
       }
    
       return (jint)maxWorkGroupSize[0];
@@ -970,7 +971,7 @@ JNI_JAVA(jintArray, KernelRunnerJNI, getKernelCompileWorkGroupSizeJNI)
       int length = queryKernelWorkGroupInfo(jEnv, jniContext, CL_KERNEL_COMPILE_WORK_GROUP_SIZE, compileWorkGroupSize);
       if (length == 0) {
          throwAparapiJNIRuntimeException(jEnv, "getKernelCompileWorkGroupSizeJNI() invalid length: " + std::to_string(length));
-         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + length);
+         throw JNIException("queryKernelWorkGroupInfo() invalid length: " + std::to_string(length));
       } 
       
       jintArray jArr = jEnv->NewIntArray(length);
diff --git a/src/cpp/runKernel/KernelArg.cpp b/src/cpp/runKernel/KernelArg.cpp
index 154ed84..65948d1 100644
--- a/src/cpp/runKernel/KernelArg.cpp
+++ b/src/cpp/runKernel/KernelArg.cpp
@@ -91,7 +91,9 @@ const char* KernelArg::getTypeName() {
    else if(isDouble()) {
       s += "double";
    }
-   return s.c_str();
+   static char msg[256];
+   std::strcpy(msg, s.c_str());
+   return msg;
 }
 
 void KernelArg::getPrimitiveValue(JNIEnv *jenv, jfloat* value) {
